name: CI/CD Pipeline

on:
  push:
    branches: [ temp ]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python all python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64

      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      - name: Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Activate and Install Depencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
#         if: steps.cache-venv.outputs.cache-hit != 'true'

      # Install all the app dependencies
      - name: Install dependencies
        run: pip3 install -r requirements.txt

      # Build the app and run tests
      - name: Build and Run Test
        run: . venv/bin/activate

      - name: Create archive of dependencies
        run: |
          cd ./venv/lib/python3.8/site-packages
          zip -r9 ../../../../api.zip .
      - name: Add API files to Zip file
        run: cd ./app && zip -g ../api.zip -r .
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Download Lambda api.zip
        uses: actions/download-artifact@v2
        with:
          name: api

      - name: Upload to S3
        run: aws s3 cp api.zip s3://perp-backend-python/api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name perp-backend --s3-bucket perp-backend-python --s3-key api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

name: CI/CD Pipeline

on:
  push:
    branches: [ temp ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Setup Node
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'

      # Step 3: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Step 4a: Set Main Variables
      - name: Set variables (main)
        if: endsWith(github.ref, '/main')
        run: |
          echo "ROLE_TO_ASSUME=arn:aws:iam::661212801069:role/github-actions-deployment-role" >> $GITHUB_ENV
          echo "STAGE=prod" >> $GITHUB_ENV
      # Step 4b: Set Develop Variables
      - name: Set variables (develop)
        if: endsWith(github.ref, '/develop')
        run: |
          echo "ROLE_TO_ASSUME=arn:aws:iam::060703538658:role/github-actions-deployment-role" >> $GITHUB_ENV
          echo "STAGE=dev" >> $GITHUB_ENV
      # Step 5: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 3600
          role-session-name: Claro_Money_Zoom_API_Deployment

      # Step 6: Install Node Modules
      - name: Install node modules
        run: |
          npm install -g serverless
          npm install
      # Step 7: Install Python Dependencies
      - name: Install python dependencies
        run: pip install -r requirements.txt

      # Step 8: Deploy Serverless
      - name: Deploy serverless
        run: |
          serverless deploy -s $STAGE
